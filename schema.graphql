### Parties ###
type Party {
  id: String
  title: String
  description: String
  location: String
  date: String
  participants(limit: Int, nextToken: String): Participants
}

input CreateParty {
  title: String
  description: String
  location: String
  date: String
}

input UpdateParty {
  id: String!
  title: String
  description: String
  location: String
  date: String
}

### Pariticpants ###
type Participant {
  partyId: String
  id: String
  name: String
  email: String
  invitationSent: Boolean
}

input CreateParticipant {
  partyId: String!
  name: String
  email: String
  invitationSent: Boolean
}

input UpdateParticipant {
  partyId: String!
  id: String!
  name: String
  email: String
  invitationSent: Boolean
}

type Participants {
  items: [Participant]
  nextToken: String
}

### Queries and Mutations ###
type Query {
  ## TODO delete also all participants once a party is deleted
  getParty(id: String!): Party
  getParticipant(partyId: String!, id: String!): Participant
  getParticipants(
    partyId: String!
    limit: Int
    nextToken: String
  ): Participants
}

type Mutation {
  createParty(args: CreateParty!): Party
  updateParty(args: UpdateParty!): Party
  deleteParty(id: String!): Party
  createParticipant(args: CreateParticipant!): Participant
  updateParticipant(args: UpdateParticipant!): Participant
  deleteParticipant(partyId: String!, id: String!): Participant
}

type Subscription {
  updatedParty(id: String!): Party
  @aws_subscribe(mutations: ["updateParty"])
  createdParticipant(partyId: String!): Participant
  @aws_subscribe(mutations: ["createParticipant"])
  updatedParticipant(partyId: String!): Participant
  @aws_subscribe(mutations: ["updateParticipant"])
  deletedParticipant(partyId: String!): Participant
  @aws_subscribe(mutations: ["deleteParticipant"])
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
